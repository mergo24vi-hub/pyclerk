import os
import re
from docx import Document
from parse_fields import parse_fields

path = r"G:\.shortcut-targets-by-id\1Pcnp8gnqT8NS3Zl5AOanpcBmZLHuuv5I\–†–û —Ä–æ–±–æ—á–∞\–û–°–û–ë–ò–°–¢–Ü –ü–ê–ü–ö–ò\.–ù–µ —à—Ç–∞—Ç–Ω—ñ\.–°–ó–ß\\"

def parse_employee_form_from_4col_table(file_path: str) -> dict:
    doc = Document(file_path)
    data = {}

    # –ú–∞–ø—ñ–Ω–≥ –∫–ª—é—á–æ–≤–∏—Ö —Ñ—Ä–∞–∑ –Ω–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –ø–æ–ª—ñ–≤
    field_keywords = {
        "–≤—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è": "rank",
        "–ø—ñ–±": "full_name",
        "–ø–æ—Å–∞–¥–∞": "position",
        "–¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "birth_date",
        "–º—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "birth_place",
        "–º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è": "residence",
        "—ñ–ø–Ω": "tax_id",
        "—Ç–µ–ª–µ—Ñ–æ–Ω": "phone",
        "–≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ": "blood_type",
        "–ø–∞—Å–ø–æ—Ä—Ç": "passport",
        "–≤—ñ–π—Å—å–∫–æ–≤–∏–π –∫–≤–∏—Ç–æ–∫": "military_id",
        "–æ—Å–≤—ñ—Ç–∞": "education",
        "–ø—Ä–∏–∑–≤–∞–Ω–∏–π": "enlistment",
        "—É—á–∞—Å—Ç—å –≤ –∞—Ç–æ": "ato_participation",
        "–æ–æ—Å": "ato_participation",
        "—É–±–¥": "combatant_status",
        "–ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è": "driver_license",
        "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è": "driver_license",
        "—Å—ñ–º–µ–π–Ω–∏–π —Å—Ç–∞–Ω": "marital_status",
        "–¥—ñ—Ç–∏": "children",
        "–±–∞—Ç—å–∫–∏": "parents",
        "–±—Ä–∞—Ç–∏": "siblings",
        "—Å–µ—Å—Ç—Ä–∏": "siblings",
        "–Ω–∞–≥–æ—Ä–æ–¥–∏": "awards",
        "–ø–æ—Ä–∞–Ω–µ–Ω–Ω—è": "injuries",
        "—Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è": "injuries",
        "–≤—ñ—Ä–æ—Å–ø–æ–≤—ñ–¥–∞–Ω–Ω—è": "religion",
        "—Ä–æ–∑–º—ñ—Ä–∏": "sizes",
        "–æ–¥—è–≥—É": "sizes",
        "–∞–ª–∫–æ–≥–æ–ª—é": "attitude_substances",
        "–Ω–∞—Ä–∫–æ—Ç–∏—á–Ω–∏—Ö": "attitude_substances",
        "—Å—É–¥–∏–º–æ—Å—Ç—ñ": "convictions",
        "–¥–æ—Å–≤—ñ–¥ —Ä–æ–±—ñ—Ç": "work_experience",
        "–∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è": "interests",
        "—ñ–Ω—Ç–µ—Ä–µ—Å–∏": "interests",
        "—Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤‚Äô—è": "health",
        "–∞–ª–µ—Ä–≥—ñ—è": "health",
    }

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤
    def normalize_key(text):
        text = text.strip().lower()
        for keyword, field in field_keywords.items():
            if keyword in text:
                return field
        return None

    # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ
    for table in doc.tables:
        for row in table.rows:
            if len(row.cells) >= 4:
                key_raw = row.cells[2].text.strip()
                val_raw = row.cells[3].text.strip()
                key = normalize_key(key_raw)
                if key and val_raw:
                    if key in data:
                        data[key] += " " + val_raw
                    else:
                        data[key] = val_raw

    return data

def read_descriptions(folder_path):
    descript_path = os.path.join(folder_path, "descript.ion")

    if not os.path.isfile(descript_path):
        print("‚ùå –§–∞–π–ª descript.ion –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    with open(descript_path, "r", encoding="cp1251", errors="ignore") as f:
        lines = f.readlines()

    print("üìÅ –ü–∞–ø–∫–∏ –∑ –æ–ø–∏—Å–æ–º '—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞':\n")

    for line in lines:
        line = line.strip()
        if not line:
            continue

        folder_name = ""
        description = ""

        # –í–ê–†–Ü–ê–ù–¢ 1: –Ω–∞–∑–≤–∞ –≤ –ª–∞–ø–∫–∞—Ö
        match = re.match(r'^"(.+?)"\s+(.*)', line)
        if match:
            folder_name = match.group(1).strip()
            description = match.group(2).strip()
        else:
            # –í–ê–†–Ü–ê–ù–¢ 2: –±–µ–∑ –ª–∞–ø–æ–∫
            parts = line.split(maxsplit=1)
            if len(parts) == 2:
                folder_name, description = parts[0].strip(), parts[1].strip()
            else:
                continue  # —Ä—è–¥–æ–∫ –±–µ–∑ –æ–ø–∏—Å—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–∏—Å—É
        if "—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞" in description.lower():
            folder_path_full = os.path.join(folder_path, folder_name)
            exists = os.path.isdir(folder_path_full)
            status = "‚úÖ –Ñ" if exists else "‚ùå –ù–µ–º–∞—î"
            print(f"{status} | üìå {folder_name} ‚Üí {description}")

            if exists:
                # –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ —É –ø—ñ–¥–ø–∞–ø–∫–∞—Ö –∑ –Ω–∞–∑–≤–æ—é "—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞"
                for root, dirs, files in os.walk(folder_path_full):
                    for file in files:
                        if "—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞" in file.lower():
                            full_path = os.path.join(root, file)
                            #print(f"   üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª: {full_path}")
                            print(parse_fields(full_path))
                            break

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É
f1 = r"G:\.shortcut-targets-by-id\1Pcnp8gnqT8NS3Zl5AOanpcBmZLHuuv5I\–†–û —Ä–æ–±–æ—á–∞\–û–°–û–ë–ò–°–¢–Ü –ü–ê–ü–ö–ò\.–ù–µ —à—Ç–∞—Ç–Ω—ñ\.–°–ó–ß\\–ì–û–†–®–ö–û–í –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á 2024.11.15\—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞ –°–î–î –ì–û–†–®–ö–û–í –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á.docx"
f2 = r"G:\.shortcut-targets-by-id\1Pcnp8gnqT8NS3Zl5AOanpcBmZLHuuv5I\–†–û —Ä–æ–±–æ—á–∞\–û–°–û–ë–ò–°–¢–Ü –ü–ê–ü–ö–ò\.–ù–µ —à—Ç–∞—Ç–Ω—ñ\.–°–ó–ß\\–°–æ–ª–æ–≤—è–Ω\—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞ –û—Å–æ–±–æ–≤–∞_—Å–ø—Ä–∞–≤–∞ –°–û–õ–û–í–Ø–ù.docx"
f3 = r"G:\.shortcut-targets-by-id\1Pcnp8gnqT8NS3Zl5AOanpcBmZLHuuv5I\–†–û —Ä–æ–±–æ—á–∞\–û–°–û–ë–ò–°–¢–Ü –ü–ê–ü–ö–ò\.–ù–µ —à—Ç–∞—Ç–Ω—ñ\.–°–ó–ß\\–°—ñ–Ω–µ–Ω–∫–æ\—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞ –û—Å–æ–±–æ–≤–∞_—Å–ø—Ä–∞–≤–∞ –°—ñ–Ω–µ–Ω–∫–æ.docx"

if __name__ == "__main__":
    #rez = parse_employee_form(r"G:\.shortcut-targets-by-id\1Pcnp8gnqT8NS3Zl5AOanpcBmZLHuuv5I\–†–û —Ä–æ–±–æ—á–∞\–û–°–û–ë–ò–°–¢–Ü –ü–ê–ü–ö–ò\.–ù–µ —à—Ç–∞—Ç–Ω—ñ\.–°–ó–ß\\–ì–û–†–®–ö–û–í –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á 2024.11.15\—Å—Ç–∞—Ä–∞ –∞–Ω–∫–µ—Ç–∞ –°–î–î –ì–û–†–®–ö–û–í –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á.docx")
    read_descriptions(path.strip())
